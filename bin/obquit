#!/usr/bin/env python3

# Obquit
# Copyright (C) 2015  Dino DuratoviÄ‡ <dinomol at mail dot com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os.path
import configparser
from collections import OrderedDict

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk

from xdg.BaseDirectory import xdg_config_home

import obquit

DEFAULT_COMMANDS = OrderedDict((
    ("shutdown", "systemctl poweroff"),
    ("suspend", "systemctl suspend"),
    ("logout", "openbox --exit"),
    ("hibernate", "systemctl hibernate"),
    ("reboot", "systemctl reboot"),
    ("cancel", "None")
    ))
DEFAULT_SHORTCUTS = OrderedDict((
    ("shutdown", "s"),
    ("suspend", "u"),
    ("logout", "l"),
    ("hibernate", "h"),
    ("reboot", "r"),
    ("cancel", "c")
    ))
DEFAULT_OPACITY = 0.7
DEFAULT_FORCE_FAKE = False

def parse_config():
    """Parses config file, returns settings"""
    user = xdg_config_home + "/obquit/obquit.conf"
    system = "/etc/obquit/obquit.conf"

    # a local user config takes precedence
    if os.path.exists(user):
        config_file = user
    elif os.path.exists(system):
        config_file = system
    else:
        config_file = None

    config = configparser.ConfigParser()
    if config_file:
        config.read(config_file)

    # checks if the config has the proper section first
    # if it doesn't, uses the built-in defaults
    if not config.has_section("Commands"):
        commands = DEFAULT_COMMANDS
    else:
        commands = config["Commands"]

    if not config.has_section("Shortcuts"):
        shortcuts = DEFAULT_SHORTCUTS
    else:
        shortcuts = config["Shortcuts"]

    if config.has_option("Options", "opacity"):
        opacity = config.getfloat("Options", "opacity")
    else:
        opacity = DEFAULT_OPACITY

    if config.has_option("Options", "force fake"):
        force_fake = config.getboolean("Options", "force fake")
    else:
        force_fake = DEFAULT_FORCE_FAKE

    return commands, shortcuts, opacity, force_fake

# unpacks the config options
commands, shortcuts, opacity, force_fake = parse_config()

# runs the application
obquit.OBquit(commands, shortcuts, opacity, force_fake)
